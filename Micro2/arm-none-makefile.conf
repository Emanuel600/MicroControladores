# Toolchain PATH
TOOLCHAIN		= C:/VScode/toolchains
# Firmware Repository PATH
WIN_HOME		= $(subst \,/,$(HOME))
STM_REP			= $(WIN_HOME)/STM32Cube/Repository

#==! Directories used !==#
# User code and generated files
BIN_DIR			= bin
SOURCE_DIR		= Core/Src
BUILD_DIR		= build
INCLUDE_DIR		= Core/Inc
DEP_DIR			= deps
DOC_DIR			= docs
# Firmware code
FIRMWARE_DIR	= $(STM_REP)/STM32Cube_FW_$(STM_TYPE)_V$(VERSION)
DRIVERS			= $(FIRMWARE_DIR)/Drivers
MIDDLEWARES		= $(FIRMWARE_DIR)/Middlewares
UTILITIES		= $(FIRMWARE_DIR)/Utilities
HAL_DRIVERS		= $(DRIVERS)/STM32$(STM_TYPE)xx_HAL_Driver
CMSIS			= $(DRIVERS)/CMSIS
CMSIS_DEV		= $(CMSIS)/DEVICE/ST/STM32$(STM_TYPE)xx
#========================#

#==! Includes !==#
INCS			= \
	-I$(HAL_DRIVERS)/Inc \
	-I$(HAL_DRIVERS)/Inc/Legacy \
	-I$(CMSIS_DEV)/Include \
	-I$(CMSIS)/Include \
	-I$(INCLUDE_DIR)

ASM_INCS		=

#================#
# Use newlib-nano. To disable it, specify USE_NANO=
USE_NANO			= --specs=nano.specs

# Use seimhosting or not
USE_SEMIHOST		= --specs=rdimon.specs
USE_NOHOST			= --specs=nosys.specs

CORE				= CM$(CORTEX_M)

# BinUtils
CC				= arm-none-eabi-gcc
CXX				= arm-none-eabi-g++
AS				= $(CXX) -x assembler-with-cpp
DBG				= arm-none-eabi-gdb

# Bin Handlers
OBJ_COPY		= arm-none-eabi-objcopy
OBJ_DUMP		= arm-none-eabi-objdump
SZ				= arm-none-eabi-size

#==! Flags !==#
# Common compiler flags
W_FLAGS			= -Wall -Wextra -Wpedantic
F_FLAGS			= -ffreestanding -ffunction-sections -fdata-sections -flto
DEP_STR			= "$(addprefix $(DEP_DIR)/, $(addsuffix .d, $(basename $(notdir $(@)))))"
DEP_FLAGS		= -MMD -MP -MF$(DEP_STR)
FLAGS			= $(W_FLAGS) $(F_FLAGS) $(OPT_F) $(DEP_FLAGS)
# Flags for the ARM compiler
ARM_FLAGS		= -mthumb -mcpu=cortex-m$(CORTEX_M) -Wa,-mthumb -Wa,-mcpu=cortex-m$(CORTEX_M)
# C++ Flags
CXX_FLAGS		= $(FLAGS) $(ARM_FLAGS) $(STARTUP_DEFS) $(USER_DEFS) $(INCS)
CXX_FLAGS		+= -std=gnu++17 -fno-rtti
# C Flags
CC_FLAGS		= $(FLAGS) $(ARM_FLAGS) $(STARTUP_DEFS) $(USER_DEFS) $(INCS)
CC_FLAGS		+= -std=gnu18
# ASM Flags
ASM_FLAGS		= $(FLAGS) $(ARM_FLAGS) $(STARTUP_DEFS) $(USER_DEFS) $(ASM_INCS)
# GO Flags
# GO_FLAGS		= -buildmode=c-shared
# Linker Flags
LDFLAGS			= -lc $(ARM_FLAGS) -flto
#=============#
# Link for code size
GC		= -Wl,--gc-sections

# Create map file
MAP		= -Wl,-Map=$(APP).map

# Start-up code jumps to __START
STARTUP_DEFS		= -D__NO_SYSTEM_INIT
USER_DEFS			=
